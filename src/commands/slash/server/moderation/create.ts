import { CommandInteraction } from 'discord.js';
import { createMinecraftServer } from '../../../../utils/docker';
import { fetchMinecraftVersions } from '../../../../utils/minecraftApi';
import { MinecraftServerConfigSchema, MinecraftServerConfig } from '../../../../schemas/minecraft';
import { z } from 'zod';

export async function createCommand(interaction: CommandInteraction) {
  const serverName = interaction.options.get('name')?.value as string;
  const version = interaction.options.get('version')?.value as string;
  const maxPlayers = interaction.options.get('maxplayers')?.value as number;
  const gameMode = interaction.options.get('gamemode')?.value as string || 'survival';
  const difficulty = interaction.options.get('difficulty')?.value as string || 'normal';
  const hardcore = interaction.options.get('hardcore')?.value as boolean || false;
  const allowPvp = interaction.options.get('allowpvp')?.value as boolean || true;
  const allowNether = interaction.options.get('allownether')?.value as boolean || true;
  const onlineMode = interaction.options.get('onlinemode')?.value as boolean || true;
  const motd = interaction.options.get('motd')?.value as string || 'Server generated by Discord Bot';

  if (!interaction.guildId) {
    await interaction.reply('Error: Could not identify the Guild.');
    return;
  }

  if (!serverName || !version || !maxPlayers) {
    await interaction.reply('Please fill in all the necessary information: name, version, and maximum number of players.');
    return;
  }

  try {
    const serverConfigData = {
      name: serverName,
      version: version,
      maxPlayers: maxPlayers,
      ownerGuildId: interaction.guildId,
      gameMode: gameMode,
      difficulty: difficulty,
      hardcore: hardcore,
      allowPvp: allowPvp,
      allowNether: allowNether,
      onlineMode: onlineMode,
      motd: motd,
      status: 'active',
    };

    const validatedConfig: MinecraftServerConfig = MinecraftServerConfigSchema.parse(serverConfigData);

    const newServer = await createMinecraftServer(validatedConfig);

    await interaction.reply(`Minecraft server '${newServer.name}' was successfully created! IP: ${newServer.ipAddress}:${newServer.port}`);
  } catch (error) {
    if (error instanceof z.ZodError) {
      await interaction.reply(`Server configuration error: ${error}`);
    } else {
      console.error('Error creating the server:', error);
      await interaction.reply('An error occurred while trying to create the Minecraft server.');
    }
  }
}
